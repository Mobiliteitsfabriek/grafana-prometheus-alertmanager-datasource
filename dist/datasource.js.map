{"version":3,"sources":["../src/datasource.js"],"names":["dsRegularEscape","value","replace","dsSpecialRegexEscape","_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","severityLevels","jsonData","severity_critical","undefined","toLowerCase","severity_high","severity_warning","severity_info","targetData","filter","active","queryActive","silenced","querySilenced","inhibited","queryInhibited","query","matchedFunction","queryTypes","regex","i","length","matches","match","encodeURIComponent","interpolateQueryExpr","unique","Set","results","defaultTargetData","datasourceRequest","createUrl","method","then","response","data","forEach","Object","keys","castArray","v","JSON","stringify","has","add","push","text","options","buildQueryParameters","targets","t","hide","when","expr","scopedVars","labelSelector","parseLabelSelector","headers","columnsDict","getColumnsDict","columns","getColumns","row","Array","fill","item","Date","parse","label","annotation","rows","now","variable","defaultFormatFn","escapedValues","map","join","column","input","trim","split","index","severityDefined","labelIndex","selectedLabel","status","message","title","target","targetss","refId","legendFormat","labels","aliasRegex","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.severityLevels = {};\n        if (instanceSettings.jsonData.severity_critical != undefined) {\n            this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()] = 4;\n        }\n        if (instanceSettings.jsonData.severity_high != undefined) {\n            this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()] = 3;\n        }\n        if (instanceSettings.jsonData.severity_warning != undefined) {\n            this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()] = 2;\n        }\n        if (instanceSettings.jsonData.severity_info != undefined) {\n            this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()] = 1;\n        }\n    }\n\n    createUrl(targetData, filter = undefined) {\n        const active = targetData.queryActive ? 'true' : 'false';\n        const silenced = targetData.querySilenced ? 'true' : 'false';\n        const inhibited = targetData.queryInhibited ? 'true' : 'false';\n        let url = `${this.url}/api/v2/alerts?active=${active}&silenced=${silenced}&inhibited=${inhibited}`;\n\n        if (filter !== undefined && filter !== '') {\n            url += '&filter=' + filter;\n        }\n\n        return url;\n    }\n\n    metricFindQuery(query) {\n        let matchedFunction = {};\n        if (query) {\n            const queryTypes = [\n                {\n                    type: 'names',\n                    regex: /^(label|annotation)_names\\((.*?)\\)\\s*$/\n                },\n                {\n                    type: 'values',\n                    regex: /^(label|annotation)_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/\n                },\n                {\n                    type: 'key',\n                    regex: /^(labels|annotations|receivers|generatorURL)\\((.*?)\\)\\s*$/\n                }\n            ];\n            for (let i = 0; i < queryTypes.length; i++) {\n                queryTypes[i].matches = query.match(queryTypes[i].regex);\n                if (queryTypes[i].matches) {\n                    matchedFunction = queryTypes[i];\n                    break;\n                }\n            }\n            if (matchedFunction.type) {\n                query = matchedFunction[2] || ''\n            }\n            if (query) {\n                query = encodeURIComponent(this.templateSrv.replace(query, {}, this.interpolateQueryExpr) || \"\");\n            }\n        }\n        let unique = new Set();\n        let results = [];\n        const defaultTargetData = {\n            queryActive: true,\n            querySilenced: false,\n            queryInhibited: false\n        };\n        return this.backendSrv.datasourceRequest({\n            url: this.createUrl(defaultTargetData, query),\n            method: 'GET'\n        }).then(response => {\n            response.data.forEach(value => {\n                if (matchedFunction.type === 'key') {\n                    value = value[matchedFunction.matches[1]];\n                } else if (matchedFunction.type === 'names') {\n                    value = Object.keys(value[matchedFunction.matches[1] + 's'])\n                } else if (matchedFunction.type === 'values') {\n                    value = value[matchedFunction.matches[1] + 's'][matchedFunction.matches[3]];\n                }\n                _.castArray(value).forEach(v => {\n                    if (v) {\n                        if (typeof v === 'object') {\n                            v = JSON.stringify(v);\n                        }\n                        if (!unique.has(v)) {\n                            unique.add(v);\n                            results.push({text: v})\n                        }\n                    }\n                })\n            });\n            return results;\n        });\n    }\n\n    query(options) {\n        let query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars, this.interpolateQueryExpr) || \"\");\n        let url = this.createUrl(query.targets[0], filter);\n        // Format data for table panel\n        if (query.targets[0].type === \"table\") {\n            let labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n            return this.backendSrv.datasourceRequest({\n                url: url,\n                data: query,\n                method: 'GET',\n                headers: {'Content-Type': 'application/json'}\n            }).then(response => {\n                let results = {\n                    \"data\": [{\n                        \"rows\": [],\n                        \"columns\": [],\n                        \"type\": \"table\"\n                    }]\n                };\n\n                if (response.data && response.data && response.data.length) {\n                    let columnsDict = this.getColumnsDict(response.data, labelSelector);\n                    results.data[0].columns = this.getColumns(columnsDict);\n\n                    for (let i = 0; i < response.data.length; i++) {\n                        let row = new Array(results.data[0].columns.length).fill(\"\");\n                        let item = response.data[i];\n                        row[0] = [Date.parse(item['startsAt'])];\n\n                        for (let label of Object.keys(item['labels'])) {\n                            if (label in columnsDict) {\n                                if (label === 'severity') {\n                                    row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\n                                } else {\n                                    row[columnsDict[label]] = item['labels'][label];\n                                }\n                            }\n                        }\n                        for (let annotation of Object.keys(item['annotations'])) {\n                            if (annotation in columnsDict) {\n                                row[columnsDict[annotation]] = item['annotations'][annotation];\n                            }\n                        }\n                        results.data[0].rows.push(row);\n                    }\n                }\n                return results;\n            });\n        } else {\n            return this.backendSrv.datasourceRequest({\n                url: url,\n                data: query,\n                method: 'GET',\n                headers: {'Content-Type': 'application/json'}\n            }).then(response => {\n                return {\n                    \"data\": [{\"datapoints\": [[response.data.length, Date.now()]]}]\n                }\n            });\n        }\n    }\n\n    interpolateQueryExpr(value, variable, defaultFormatFn) {\n        if (typeof value === 'string') {\n            return dsSpecialRegexEscape(value);\n        }\n\n        let escapedValues = _.map(value, dsSpecialRegexEscape);\n        return escapedValues.join('|');\n    }\n\n    getColumns(columnsDict) {\n        let columns = [{text: \"Time\", type: \"time\"}];\n        for (let column of Object.keys(columnsDict)) {\n            columns.push({text: column, type: \"string\"})\n        }\n        return columns;\n    }\n\n    // Parses the label list into a map\n    parseLabelSelector(input) {\n        let map;\n        if (typeof (input) === \"undefined\" || input.trim().length === 0) {\n            map = [\"*\"];\n        } else {\n            map = input.trim().split(/\\s*,\\s*/);\n        }\n        return map;\n    }\n\n    // Creates a column index dictionary in to assist in data row construction\n    getColumnsDict(data, labelSelector) {\n        let index = 1; // 0 is the data column\n        let columnsDict = {};\n        let severityDefined = false;\n        for (let i = 0; i < data.length; i++) {\n            for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n                let selectedLabel = labelSelector[labelIndex];\n                if (selectedLabel === \"*\") {\n                    // '*' maps to all labels/annotations not already added via the label selector list\n                    for (let label of Object.keys(data[i]['labels'])) {\n                        if (!(label in columnsDict)) {\n                            if (label === 'severity') {\n                                severityDefined = true\n                            }\n                            columnsDict[label] = index++;\n                        }\n                    }\n                    for (let annotation of Object.keys(data[i]['annotations'])) {\n                        if (!(annotation in columnsDict)) {\n                            columnsDict[annotation] = index++;\n                        }\n                    }\n                } else if (!(selectedLabel in columnsDict)) {\n                    if (selectedLabel === 'severity') {\n                        severityDefined = true\n                    }\n                    columnsDict[selectedLabel] = index++;\n                }\n            }\n        }\n        if (!severityDefined) {\n            columnsDict['severity'] = index++;\n        }\n        return columnsDict;\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v2/status',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n            }\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric';\n        });\n\n        options.targetss = _.map(options.targets, target => {\n            return {\n                target: this.templateSrv.replace(target.target),\n                expr: target.expr,\n                refId: target.refId,\n                hide: target.hide,\n                type: target.type || 'single',\n                legendFormat: target.legendFormat || \"\"\n            };\n        });\n        return options;\n    }\n\n    formatInstanceText(labels, legendFormat) {\n        if (legendFormat === \"\") {\n            return JSON.stringify(labels);\n        }\n        let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n        return legendFormat.replace(aliasRegex, function (match, g1) {\n            if (labels[g1]) {\n                return labels[g1];\n            }\n            return \"\";\n        });\n    }\n\n}\n\nexport function dsRegularEscape(value) {\n    if (typeof value === 'string') {\n        return value.replace(/'/g, \"\\\\\\\\'\");\n    }\n    return value;\n}\n\nexport function dsSpecialRegexEscape(value) {\n    if (typeof value === 'string') {\n        return dsRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\n    }\n    return value;\n}\n"]}