{"version":3,"sources":["../src/datasource.js"],"names":["dsRegularEscape","value","replace","dsSpecialRegexEscape","_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","severityLevels","jsonData","severity_critical","undefined","toLowerCase","severity_high","severity_warning","severity_info","queryActive","querySilenced","queryInhibited","expr","active","silenced","inhibited","length","map","x","join","query","matchedFunction","queryTypes","regex","i","matches","match","encodeURIComponent","interpolateQueryExpr","unique","Set","results","defaultTargetData","datasourceRequest","createUrl","method","then","response","data","forEach","Object","keys","castArray","v","JSON","stringify","has","add","push","text","options","buildQueryParameters","targets","filter","t","hide","when","labelSelector","parseLabelSelector","headers","columnsDict","getColumnsDict","columns","getColumns","row","Array","fill","item","Date","parse","label","annotation","rows","now","variable","defaultFormatFn","escapedValues","column","input","trim","split","index","severityDefined","labelIndex","selectedLabel","status","message","title","target","legendFormat","props","exprArray","labels","aliasRegex","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.severityLevels = {};\n        if (instanceSettings.jsonData.severity_critical != undefined) {\n            this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()] = 4;\n        }\n        if (instanceSettings.jsonData.severity_high != undefined) {\n            this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()] = 3;\n        }\n        if (instanceSettings.jsonData.severity_warning != undefined) {\n            this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()] = 2;\n        }\n        if (instanceSettings.jsonData.severity_info != undefined) {\n            this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()] = 1;\n        }\n    }\n\n    createUrl({queryActive, querySilenced, queryInhibited, expr = []}) {\n        const active = queryActive ? 'true' : 'false';\n        const silenced = querySilenced ? 'true' : 'false';\n        const inhibited = queryInhibited ? 'true' : 'false';\n        let url = `${this.url}/api/v2/alerts?active=${active}&silenced=${silenced}&inhibited=${inhibited}`;\n\n        if (expr !== undefined && expr.length > 0) {\n            url += expr.map(x => `&filter=${x}`).join('');\n        }\n\n        return url;\n    }\n\n    metricFindQuery(query) {\n        let matchedFunction = {};\n        if (query) {\n            const queryTypes = [\n                {\n                    type: 'names',\n                    regex: /^(label|annotation)_names\\((.*?)\\)\\s*$/\n                },\n                {\n                    type: 'values',\n                    regex: /^(label|annotation)_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/\n                },\n                {\n                    type: 'key',\n                    regex: /^(labels|annotations|receivers|generatorURL)\\((.*?)\\)\\s*$/\n                }\n            ];\n            for (let i = 0; i < queryTypes.length; i++) {\n                queryTypes[i].matches = query.match(queryTypes[i].regex);\n                if (queryTypes[i].matches) {\n                    matchedFunction = queryTypes[i];\n                    break;\n                }\n            }\n            if (matchedFunction.type) {\n                query = matchedFunction[2] || ''\n            }\n            if (query) {\n                query = encodeURIComponent(this.templateSrv.replace(query, {}, this.interpolateQueryExpr) || \"\");\n            }\n        }\n        let unique = new Set();\n        let results = [];\n        const defaultTargetData = {\n            queryActive: true,\n            querySilenced: false,\n            queryInhibited: false,\n            expr: query\n        };\n        return this.backendSrv.datasourceRequest({\n            url: this.createUrl(defaultTargetData),\n            method: 'GET'\n        }).then(response => {\n            response.data.forEach(value => {\n                if (matchedFunction.type === 'key') {\n                    value = value[matchedFunction.matches[1]];\n                } else if (matchedFunction.type === 'names') {\n                    value = Object.keys(value[matchedFunction.matches[1] + 's'])\n                } else if (matchedFunction.type === 'values') {\n                    value = value[matchedFunction.matches[1] + 's'][matchedFunction.matches[3]];\n                }\n                _.castArray(value).forEach(v => {\n                    if (v) {\n                        if (typeof v === 'object') {\n                            v = JSON.stringify(v);\n                        }\n                        if (!unique.has(v)) {\n                            unique.add(v);\n                            results.push({text: v})\n                        }\n                    }\n                })\n            });\n            return results;\n        });\n    }\n\n    query(options) {\n        let query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        let url = this.createUrl(query.targets[0]);\n        // Format data for table panel\n        if (query.targets[0].type === \"table\") {\n            let labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n            return this.backendSrv.datasourceRequest({\n                url: url,\n                data: query,\n                method: 'GET',\n                headers: {'Content-Type': 'application/json'}\n            }).then(response => {\n                let results = {\n                    \"data\": [{\n                        \"rows\": [],\n                        \"columns\": [],\n                        \"type\": \"table\"\n                    }]\n                };\n\n                if (response.data && response.data && response.data.length) {\n                    let columnsDict = this.getColumnsDict(response.data, labelSelector);\n                    results.data[0].columns = this.getColumns(columnsDict);\n\n                    for (let i = 0; i < response.data.length; i++) {\n                        let row = new Array(results.data[0].columns.length).fill(\"\");\n                        let item = response.data[i];\n                        row[0] = [Date.parse(item['startsAt'])];\n\n                        for (let label of Object.keys(item['labels'])) {\n                            if (label in columnsDict) {\n                                if (label === 'severity') {\n                                    row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\n                                } else {\n                                    row[columnsDict[label]] = item['labels'][label];\n                                }\n                            }\n                        }\n                        for (let annotation of Object.keys(item['annotations'])) {\n                            if (annotation in columnsDict) {\n                                row[columnsDict[annotation]] = item['annotations'][annotation];\n                            }\n                        }\n                        results.data[0].rows.push(row);\n                    }\n                }\n                return results;\n            });\n        } else {\n            return this.backendSrv.datasourceRequest({\n                url: url,\n                data: query,\n                method: 'GET',\n                headers: {'Content-Type': 'application/json'}\n            }).then(response => {\n                return {\n                    \"data\": [{\"datapoints\": [[response.data.length, Date.now()]]}]\n                }\n            });\n        }\n    }\n\n    interpolateQueryExpr(value, variable, defaultFormatFn) {\n        if (typeof value === 'string') {\n            return dsSpecialRegexEscape(value);\n        }\n\n        let escapedValues = _.map(value, dsSpecialRegexEscape);\n        return escapedValues.join('|');\n    }\n\n    getColumns(columnsDict) {\n        let columns = [{text: \"Time\", type: \"time\"}];\n        for (let column of Object.keys(columnsDict)) {\n            columns.push({text: column, type: \"string\"})\n        }\n        return columns;\n    }\n\n    // Parses the label list into a map\n    parseLabelSelector(input) {\n        let map;\n        if (typeof (input) === \"undefined\" || input.trim().length === 0) {\n            map = [\"*\"];\n        } else {\n            map = input.trim().split(/\\s*,\\s*/);\n        }\n        return map;\n    }\n\n    // Creates a column index dictionary in to assist in data row construction\n    getColumnsDict(data, labelSelector) {\n        let index = 1; // 0 is the data column\n        let columnsDict = {};\n        let severityDefined = false;\n        for (let i = 0; i < data.length; i++) {\n            for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n                let selectedLabel = labelSelector[labelIndex];\n                if (selectedLabel === \"*\") {\n                    // '*' maps to all labels/annotations not already added via the label selector list\n                    for (let label of Object.keys(data[i]['labels'])) {\n                        if (!(label in columnsDict)) {\n                            if (label === 'severity') {\n                                severityDefined = true\n                            }\n                            columnsDict[label] = index++;\n                        }\n                    }\n                    for (let annotation of Object.keys(data[i]['annotations'])) {\n                        if (!(annotation in columnsDict)) {\n                            columnsDict[annotation] = index++;\n                        }\n                    }\n                } else if (!(selectedLabel in columnsDict)) {\n                    if (selectedLabel === 'severity') {\n                        severityDefined = true\n                    }\n                    columnsDict[selectedLabel] = index++;\n                }\n            }\n        }\n        if (!severityDefined) {\n            columnsDict['severity'] = index++;\n        }\n        return columnsDict;\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v2/status',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n            }\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric';\n        });\n\n        options.targets = _.map(options.targets, ({target, expr, type = 'single', legendFormat = '', ...props}) => {\n            let exprArray = expr.split(/[;,.\\n ]/).filter(x => x.length > 0).map(x => this.templateSrv.replace(x, {}, 'pipe'));\n\n            return {\n                ...props,\n                type,\n                legendFormat,\n                target: this.templateSrv.replace(target),\n                expr: exprArray\n            };\n        });\n        return options;\n    }\n\n    formatInstanceText(labels, legendFormat) {\n        if (legendFormat === \"\") {\n            return JSON.stringify(labels);\n        }\n        let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n        return legendFormat.replace(aliasRegex, function (match, g1) {\n            if (labels[g1]) {\n                return labels[g1];\n            }\n            return \"\";\n        });\n    }\n\n}\n\nexport function dsRegularEscape(value) {\n    if (typeof value === 'string') {\n        return value.replace(/'/g, \"\\\\\\\\'\");\n    }\n    return value;\n}\n\nexport function dsSpecialRegexEscape(value) {\n    if (typeof value === 'string') {\n        return dsRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\n    }\n    return value;\n}\n"]}