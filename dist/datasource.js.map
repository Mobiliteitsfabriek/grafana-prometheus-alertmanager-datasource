{"version":3,"sources":["../src/datasource.js"],"names":["dsRegularEscape","value","replace","dsSpecialRegexEscape","_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","severityLevels","jsonData","severity_critical","undefined","toLowerCase","severity_high","severity_warning","severity_info","targetData","filter","active","queryActive","silenced","querySilenced","inhibited","queryInhibited","query","matchedFunction","queryTypes","regex","i","length","matches","match","encodeURIComponent","interpolateQueryExpr","unique","Set","results","datasourceRequest","createUrl","method","then","response","data","forEach","Object","keys","castArray","v","JSON","stringify","has","add","push","text","options","buildQueryParameters","targets","t","hide","when","expr","scopedVars","labelSelector","parseLabelSelector","headers","columnsDict","getColumnsDict","columns","getColumns","row","Array","fill","item","Date","parse","label","annotation","rows","now","variable","defaultFormatFn","escapedValues","map","join","column","input","trim","split","index","severityDefined","labelIndex","selectedLabel","status","message","title","target","targetss","refId","legendFormat","labels","aliasRegex","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n\n    this.severityLevels = {}\n    if (instanceSettings.jsonData.severity_critical != undefined) {\n      this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()] = 4;\n    }\n    if (instanceSettings.jsonData.severity_high != undefined) {\n      this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()] = 3;\n    }\n    if (instanceSettings.jsonData.severity_warning != undefined) {\n      this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()] = 2;\n    }\n    if (instanceSettings.jsonData.severity_info != undefined) {\n      this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()] = 1;\n    }\n  }\n  createUrl(targetData, filter = undefined) {\n    const active = targetData.queryActive ? 'true' : 'false';\n    const silenced = targetData.querySilenced ? 'true' : 'false';\n    const inhibited = targetData.queryInhibited ? 'true' : 'false';\n    let url = `${this.url}/api/v2/alerts?active=${active}&silenced=${silenced}&inhibited=${inhibited}`;\n\n    if (filter !== undefined && filter !== '') {\n      url += '&filter=' + filter;\n    }\n\n    return url;\n  }\n  metricFindQuery(query) {\n    let matchedFunction = {};\n    if(query) {\n      const queryTypes = [\n        {\n          type: 'names',\n          regex: /^(label|annotation)_names\\((.*?)\\)\\s*$/\n        },\n        {\n          type: 'values',\n          regex: /^(label|annotation)_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/\n        },\n        {\n          type: 'key',\n          regex: /^(labels|annotations|receivers|generatorURL)\\((.*?)\\)\\s*$/\n        }\n      ]\n      for (let i = 0; i < queryTypes.length; i++) {\n        queryTypes[i].matches = query.match(queryTypes[i].regex)\n        if (queryTypes[i].matches) {\n          matchedFunction = queryTypes[i];\n          break;\n        }\n      }\n      if (matchedFunction.type) {\n        query = matchedFunction[2] || ''\n      }\n      if(query) {\n        query = encodeURIComponent(this.templateSrv.replace(query, {}, this.interpolateQueryExpr) || \"\");\n      }\n    }\n    let unique = new Set();\n    let results = []\n    return this.backendSrv.datasourceRequest({\n      url: this.createUrl(query),\n      method: 'GET'\n    }).then(response => {\n      response.data.forEach(value => {\n        if(matchedFunction.type === 'key'){\n            value = value[matchedFunction.matches[1]];\n        }else if (matchedFunction.type === 'names') {\n            value = Object.keys(value[matchedFunction.matches[1] + 's'])\n        }else if (matchedFunction.type === 'values') {\n            value = value[matchedFunction.matches[1] + 's'][matchedFunction.matches[3]];\n        }\n        _.castArray(value).forEach( v => {\n            if(v) {\n                if(typeof v === 'object'){\n                    v=JSON.stringify(v);\n                }\n                if (!unique.has(v)) {\n                    unique.add(v)\n                    results.push({text: v})\n                }\n            }\n        })\n      })\n      return results;\n    });\n  }\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars, this.interpolateQueryExpr) || \"\");\n    let url = this.createUrl(query.targets[0], filter);\n    // Format data for table panel\n    if(query.targets[0].type === \"table\"){\n      var labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n      return this.backendSrv.datasourceRequest({\n        url: url,\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        let results = {\n          \"data\": [{\n            \"rows\": [],\n            \"columns\": [],\n            \"type\": \"table\"\n          }]\n        };\n\n        if(response.data && response.data && response.data.length) {\n          let columnsDict = this.getColumnsDict(response.data, labelSelector);\n          results.data[0].columns = this.getColumns(columnsDict);\n\n          for (let i = 0; i < response.data.length; i++) {\n            let row = new Array(results.data[0].columns.length).fill(\"\");\n            let item = response.data[i];\n            row[0] = [Date.parse(item['startsAt'])];\n\n            for (let label of Object.keys(item['labels'])) {\n              if(label in columnsDict) {\n                if(label === 'severity') {\n                  row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\n                } else {\n                  row[columnsDict[label]] = item['labels'][label];\n                }\n              }\n            }\n            for (let annotation of Object.keys(item['annotations'])) {\n              if(annotation in columnsDict) {\n                row[columnsDict[annotation]] = item['annotations'][annotation];\n              }\n            }\n            results.data[0].rows.push(row);\n          }\n        }\n        return results;\n      });\n    } else {\n      return this.backendSrv.datasourceRequest({\n        url: url,\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        return {\n          \"data\": [{ \"datapoints\": [ [response.data.length, Date.now()] ]}]\n        }\n      });\n    }\n  }\n\n  interpolateQueryExpr(value, variable, defaultFormatFn) {\n    if (typeof value === 'string') {\n      return dsSpecialRegexEscape(value);\n    }\n\n    let escapedValues = _.map(value, dsSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  getColumns(columnsDict) {\n    let columns =  [{ text: \"Time\", type: \"time\" }];\n    for(let column of Object.keys(columnsDict)) {\n      columns.push({ text: column, type: \"string\" })\n    }\n    return columns;\n  }\n\n  // Parses the label list into a map\n  parseLabelSelector(input) {\n    var map;\n    if (typeof(input) === \"undefined\" || input.trim().length === 0) {\n      map = [\"*\"];\n    } else {\n      map = input.trim().split(/\\s*,\\s*/);\n    }\n    return map;\n  }\n\n  // Creates a column index dictionary in to assist in data row construction\n  getColumnsDict(data, labelSelector) {\n    let index = 1; // 0 is the data column\n    let columnsDict = {};\n    let severityDefined = false;\n    for (let i = 0; i < data.length; i++) {\n      for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n        var selectedLabel = labelSelector[labelIndex];\n        if (selectedLabel === \"*\") {\n          // '*' maps to all labels/annotations not already added via the label selector list\n          for (let label of Object.keys(data[i]['labels'])) {\n            if(!(label in columnsDict)) {\n              if (label === 'severity') {\n                severityDefined = true\n              }\n              columnsDict[label] = index++;\n            }\n          }\n          for (let annotation of Object.keys(data[i]['annotations'])) {\n            if(!(annotation in columnsDict)) {\n              columnsDict[annotation] = index++;\n            }\n          }\n        } else if (!(selectedLabel in columnsDict)) {\n          if (selectedLabel === 'severity') {\n            severityDefined = true\n          }\n          columnsDict[selectedLabel] = index++;\n        }\n      }\n    }\n    if (!severityDefined) {\n      columnsDict['severity'] = index++;\n    }\n    return columnsDict;\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v2/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    options.targetss = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        expr: target.expr,\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'single',\n        legendFormat: target.legendFormat || \"\"\n      };\n    });\n    return options;\n  }\n\n  formatInstanceText(labels, legendFormat){\n    if(legendFormat === \"\"){\n      return JSON.stringify(labels);\n    }\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n  }\n\n\n}\nexport function dsRegularEscape(value) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function dsSpecialRegexEscape(value) {\n  if (typeof value === 'string') {\n    return dsRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n"]}